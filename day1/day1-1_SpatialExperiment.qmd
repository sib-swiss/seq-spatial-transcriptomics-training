---
title: "Exercise 1"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---


## `SpatialExperiment` object

In this first exercise, we will dive into the `SpatialExperiment` object, a cornerstone of spatial transcriptomics analysis in `R`. We will learn how to load Visium HD data, explore the different components of the object, and perform basic manipulations. By the end of this session, you will have a solid understanding of how to handle spatial transcriptomics data within the `R`/`Bioconductor` ecosystem.

![Overview of the `SpatialExperiment` class structure](../assets/images/spe.png)

## Learning Objectives

By the end of this exercise, you will be able to:

- Understand the structure of a `SpatialExperiment` object.
- Access and interpret `spatialCoords` and `imgData`.
- Perform basic subsetting operations on `SpatialExperiment` objects.
- Combine multiple `SpatialExperiment` objects.
- Apply image transformations (rotation, mirroring) to spatial data.


# Libraries 
```{r}
#| message: false
#| warning: false
#| output: false

# Load necessary R libraries for spatial transcriptomics data analysis.
library(DropletUtils)
library(BumpyMatrix)
library(SpatialExperiment)
library(VisiumIO)
library(arrow)
library(qs2)
```

# Data for the course

```{r}
if (!dir.exists("data/p1_crc/binned_outputs/square_008um/")) {
  dir.create("data")
  download.file(
    url = "https://cf.10xgenomics.com/samples/spatial-exp/3.0.0/Visium_HD_Human_Colon_Cancer_P1/Visium_HD_Human_Colon_Cancer_P1_binned_outputs.tar.gz",
    destfile = "data/Visium_HD_Human_Colon_Cancer_P1_binned_outputs.tar.gz"
  )

  untar(
    tarfile = "data/Visium_HD_Human_Colon_Cancer_P1_binned_outputs.tar.gz",
    files = c(
      "binned_outputs/square_008um/filtered_feature_bc_matrix",
      "binned_outputs/square_008um/filtered_feature_bc_matrix.h5",
      "binned_outputs/square_002um/spatial",
      "binned_outputs/square_008um/spatial"
    ),
    exdir = "data/p1_crc"
  )

  file.remove("data/Visium_HD_Human_Colon_Cancer_P1_binned_outputs.tar.gz")
} else {
  message("Data exists, please proceed to next steps!")
}
```


```{r}
# Import Visium HD data from Space Ranger output into a SpatialExperiment object.
spe <- TENxVisiumHD(
  spacerangerOut = "data/p1_crc/",
  processing = "filtered",
  format = "h5",
  images = "lowres",
  bin_size = "008"
) |>
  import()
spe
```


# Exploring the object

## `spatialCoords`
```{r}
# Display the head of the spatial coordinates, which represent the (x, y) locations of each spot.
head(spatialCoords(spe))
# List the names of the spatial coordinate columns.
spatialCoordsNames(spe)
```

## `imgData`
```{r}
# Display the image data associated with the SpatialExperiment object.
imgData(spe)
```

### `SpatialImage` class

```{r}
# Extract the SpatialImage object from the SpatialExperiment object.
spi <- getImg(spe)
spi

# Plot the raster image from the SpatialImage object.
plot(imgRaster(spe))
```

## Question 1

**How would you extract the image data for a specific sample and image ID, for example, 'sample01' and 'lowres'?**

:::{.callout-tip collapse="true"}
### Answer

```r
# Extract the image data for 'sample01' and 'lowres' image ID.
getImg(spe, sample_id = "sample01", image_id = "lowres")
```
:::

# Operations on `SpatialExperiment`

## subset by `sample_id`
```{r}
# Subset the SpatialExperiment object to include only observations from 'sample01'.
sub <- spe[, spe$sample_id == "sample01"]
```

## Question 2

**How would you subset the `SpatialExperiment` object to only include spots where the `in_tissue` column in `colData` is `TRUE`?**

:::{.callout-tip collapse="true"}
### Answer

```r
# Subset the SpatialExperiment object to retain only spots that are within the tissue area.
spe_in_tissue <- spe[, colData(spe)$in_tissue]
# Verify the number of spots after subsetting.
sum(colData(spe)$in_tissue) == ncol(spe_in_tissue)
```
:::

## retain only observations that map to tissue
```{r}
# Subset the SpatialExperiment object to retain only spots that are within the tissue area.
sub <- spe[, colData(spe)$in_tissue]
# Verify that the number of columns in the subsetted object matches the count of 'in_tissue' spots.
sum(colData(spe)$in_tissue) == ncol(sub)
```

## Combining samples
```{r}
# Create two copies of the SpatialExperiment object.
spe1 <- spe2 <- spe
# Combine the two SpatialExperiment objects column-wise (samples).
spe3 <- cbind(spe1, spe2)

# Display the unique sample IDs in the combined object.
unique(spe3$sample_id)
```

## Question 3

**Imagine you have three `SpatialExperiment` objects (`spe1`, `spe2`, `spe3`). How would you combine all three into a single object?**

:::{.callout-tip collapse="true"}
### Answer

```r
# Create three SpatialExperiment objects (for demonstration).
spe1_q3 <- spe2_q3 <- spe3_q3 <- spe
# Combine all three SpatialExperiment objects.
spe_combined_q3 <- cbind(spe1_q3, spe2_q3, spe3_q3)
# Display unique sample IDs in the combined object.
unique(spe_combined_q3$sample_id)
```
:::

## Image transformation

### Rotation
```{r}
# Extract the first image from the SpatialExperiment object.
spi <- getImg(spe)
# Apply counter-clockwise (-90 degrees) and clockwise (+90 degrees) rotations to the image.
spi1 <- rotateImg(spi, -90)
spi2 <- rotateImg(spi, +90)
# Visualize the original and rotated images for comparison.
par(mfrow = c(1, 3))
plot(as.raster(spi))
plot(as.raster(spi1))
plot(as.raster(spi2))
```

```{r}
# Specify the sample and image identifiers for targeted rotation.
sid <- "sample01"
iid <- "lowres"
# Apply a counter-clockwise rotation of -90 degrees to the specified image within the SpatialExperiment object.
tmp <- rotateImg(spe,
  sample_id = sid,
  image_id = iid,
  degrees = -90
)
# Visualize the original and rotated images for the specified sample and image ID.
par(mfrow = c(1, 2))
plot(imgRaster(spe, sid, iid))
plot(imgRaster(tmp, sid, iid))
```


### Mirroring
```{r}
# Extract the first image from the SpatialExperiment object.
spi <- getImg(spe)
# Mirror the image horizontally ("h") and vertically ("v").
spi1 <- mirrorImg(spi, "h")
spi2 <- mirrorImg(spi, "v")
# Visualize the original and mirrored images for comparison.
par(mfrow = c(1, 3))
plot(as.raster(spi))
plot(as.raster(spi1))
plot(as.raster(spi2))
```

```{r}
# Specify the sample and image identifiers for targeted mirroring.
sid <- "sample01"
iid <- "lowres"
# Mirror the specified image horizontally within the SpatialExperiment object.
tmp <- mirrorImg(spe,
  sample_id = sid,
  image_id = iid,
  axis = "h"
)
plot(imgRaster(tmp, sid, iid))
```

## Question 4

**How would you first rotate an image by 90 degrees clockwise and then mirror it horizontally?**

:::{.callout-tip collapse="true"}
### Answer

```r
# Extract the first image.
spi_q4 <- getImg(spe)
# First, rotate the image by 90 degrees clockwise.
rotated_spi_q4 <- rotateImg(spi_q4, degrees = 90)
# Then, mirror the rotated image horizontally.
final_transformed_spi_q4 <- mirrorImg(rotated_spi_q4, axis = "h")
# Visualize the original, rotated, and final transformed images.
par(mfrow = c(1, 3))
plot(as.raster(spi_q4))
plot(as.raster(rotated_spi_q4))
plot(as.raster(final_transformed_spi_q4))
```
:::


# Save the object
```{r}
qs_save(spe, file = "results/01_spe.qs2")
```

:::{.callout-important}
**Key Takeaways:**

- The `SpatialExperiment` object is a versatile container for spatial transcriptomics data.
- It allows for easy access and manipulation of spatial coordinates, image data, and assay data.
- Various operations like subsetting, combining, and image transformations can be performed efficiently.
:::
