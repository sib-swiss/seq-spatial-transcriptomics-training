{
  "hash": "d7ca9e98f354f73b8e3d85c60b00e357",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exercise 1\"\nformat: html\neditor: source\neditor_options: \n  chunk_output_type: inline\n---\n\n## Learning Objectives\n\nBy the end of this exercise, you will be able to:\n\n-   Understand the structure of a `SpatialExperiment` object.\n-   Access and interpret `spatialCoords` and `imgData`.\n-   Perform basic subsetting operations on `SpatialExperiment` objects.\n-   Combine multiple `SpatialExperiment` objects.\n-   Apply image transformations (rotation, mirroring) to spatial data.\n\n## Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary R libraries for spatial transcriptomics data analysis.\nlibrary(DropletUtils)\nlibrary(BumpyMatrix)\nlibrary(SpatialExperiment)\nlibrary(VisiumIO)\nlibrary(arrow)\nlibrary(qs2)\nlibrary(ggspavis)\nlibrary(patchwork)\nlibrary(dplyr)\n```\n:::\n\n\n## Data for the course\n\nWe start with downloading the data. We will work with VisiumHD data from human colon cancer. The full dataset is available [here](https://cf.10xgenomics.com/samples/spatial-exp/3.0.0/Visium_HD_Human_Colon_Cancer_P1/Visium_HD_Human_Colon_Cancer_P1_binned_outputs.tar.gz). It's a Visium HD dataset from human colon cancer.\n\n> We need more explanation here!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!dir.exists(\"data/Human_Colon_Cancer_P1/binned_outputs/\")) {\n  dir.create(\"data\")\n  download.file(\n    url = \"https://seq-spatial-transcriptomics-training.s3.eu-central-1.amazonaws.com/Human_Colon_Cancer_P1.tar.gz\",\n    destfile = \"Human_Colon_Cancer_P1.tar.gz\"\n  )\n\n  untar(\n    tarfile = \"data/Human_Colon_Cancer_P1.tar.gz\"\n  )\n\n  file.remove(\"data/Human_Colon_Cancer_P1.tar.gz\")\n} else {\n  message(\"Data exists, please proceed to next steps!\")\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nData exists, please proceed to next steps!\n```\n\n\n:::\n:::\n\n\nWe will import a part of the downloaded files to create a `SpatialExperiment` object. For these exercises, we choose to use the largest bin size of 16 µm:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import Visium HD data from Space Ranger output into a SpatialExperiment object.\nspe <- TENxVisiumHD(\n  spacerangerOut = \"data/Human_Colon_Cancer_P1/\",\n  processing = \"filtered\",\n  format = \"h5\",\n  images = \"lowres\",\n  bin_size = \"016\"\n) |>\n  import()\nspe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass: SpatialExperiment \ndim: 18085 127809 \nmetadata(2): resources spatialList\nassays(1): counts\nrownames(18085): ENSG00000187634 ENSG00000188976 ... ENSG00000198695\n  ENSG00000198727\nrowData names(3): ID Symbol Type\ncolnames(127809): s_016um_00052_00082-1 s_016um_00010_00367-1 ...\n  s_016um_00037_00193-1 s_016um_00144_00329-1\ncolData names(6): barcode in_tissue ... bin_size sample_id\nreducedDimNames(0):\nmainExpName: Gene Expression\naltExpNames(0):\nspatialCoords names(2) : pxl_col_in_fullres pxl_row_in_fullres\nimgData names(4): sample_id image_id data scaleFactor\n```\n\n\n:::\n:::\n\n\n::: callout-important\n## Exercise\n\nWhat other bin size do we have available?\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Answer\n\nCheck out `data/Human_Colon_Cancer_P1/binned_outputs`. Here you will find three directories:\n\n```         \nsquare_002um\nsquare_008um\nsquare_016um\n```\n\nSo in addition to 16 µm, we also have 2 and 8 µm available.\n:::\n\n## Exploring the object\n\nIn this first exercise, we will dive into the `SpatialExperiment` object, a cornerstone of spatial transcriptomics analysis in `R`. We will learn how to load Visium HD data, explore the different components of the object, and perform basic manipulations. By the end of this session, you will have a solid understanding of how to handle spatial transcriptomics data within the `R`/`Bioconductor` ecosystem.\n\n![Overview of the `SpatialExperiment` class structure](../assets/images/spe.png)\n\nThe different slots of the `SpatialExperiment` object can be approached with several helper functions that correspond with their names.\n\n::: callout-important\n## Exercise\n\nCheck out the outputs of running the following functions:\n\n-   `colData()`\n-   `spatialCoords()`\n-   `rowData()`\n-   `assay()`\n-   `imgRaster()`\n-   `reducedDims()`\n\nQuestions:\n\n-   What kind of data is in the different slots?\n-   How many spots and genes do we have?\n-   Are spots in the tissue?\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Answer\n\nThe slot `colData` contains metadata of each of the 127809 spots:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolData(spe) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDataFrame with 6 rows and 6 columns\n                                    barcode in_tissue array_row array_col\n                                <character> <integer> <integer> <integer>\ns_016um_00052_00082-1 s_016um_00052_00082-1         1        52        82\ns_016um_00010_00367-1 s_016um_00010_00367-1         1        10       367\ns_016um_00163_00399-1 s_016um_00163_00399-1         1       163       399\ns_016um_00238_00388-1 s_016um_00238_00388-1         1       238       388\ns_016um_00144_00175-1 s_016um_00144_00175-1         1       144       175\ns_016um_00297_00147-1 s_016um_00297_00147-1         1       297       147\n                         bin_size   sample_id\n                      <character> <character>\ns_016um_00052_00082-1         016    sample01\ns_016um_00010_00367-1         016    sample01\ns_016um_00163_00399-1         016    sample01\ns_016um_00238_00388-1         016    sample01\ns_016um_00144_00175-1         016    sample01\ns_016um_00297_00147-1         016    sample01\n```\n\n\n:::\n\n```{.r .cell-code}\nncol(spe)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 127809\n```\n\n\n:::\n:::\n\n\nWe also have the column `in_tissue` here, and we can check whether all the spots are in the tissue:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolData(spe) |> as.data.frame() |>\n  group_by(in_tissue) |> summarise(number = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  in_tissue number\n      <int>  <int>\n1         1 127809\n```\n\n\n:::\n:::\n\n\nThe slot `spatialCoords` maps each spot to the full resolution image:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspatialCoords(spe) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                      pxl_col_in_fullres pxl_row_in_fullres\ns_016um_00052_00082-1           4592.154           33582.69\ns_016um_00010_00367-1          21222.637           36191.27\ns_016um_00163_00399-1          23176.077           27266.75\ns_016um_00238_00388-1          22574.200           22877.49\ns_016um_00144_00175-1          10076.365           28256.34\ns_016um_00297_00147-1           8523.582           19299.57\n```\n\n\n:::\n:::\n\n\nThe slot `rowData` contains metadata about the 18085 genes for which we measured expression:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrowData(spe) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDataFrame with 6 rows and 3 columns\n                             ID      Symbol            Type\n                    <character> <character>        <factor>\nENSG00000187634 ENSG00000187634      SAMD11 Gene Expression\nENSG00000188976 ENSG00000188976       NOC2L Gene Expression\nENSG00000187961 ENSG00000187961      KLHL17 Gene Expression\nENSG00000187583 ENSG00000187583     PLEKHN1 Gene Expression\nENSG00000187642 ENSG00000187642       PERM1 Gene Expression\nENSG00000188290 ENSG00000188290        HES4 Gene Expression\n```\n\n\n:::\n\n```{.r .cell-code}\nnrow(spe)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 18085\n```\n\n\n:::\n:::\n\n\nThe assay is the core matrix of the object. Corresponding to the genes (rows) and spots (columns):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nassay(spe)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<18085 x 127809> sparse TENxMatrix object of type \"integer\":\n                s_016um_00052_00082-1 ... s_016um_00144_00329-1\nENSG00000187634                     0   .                     0\nENSG00000188976                     0   .                     0\nENSG00000187961                     0   .                     0\nENSG00000187583                     0   .                     0\nENSG00000187642                     0   .                     0\n            ...                     .   .                     .\nENSG00000212907                     1   .                    19\nENSG00000198886                     0   .                    91\nENSG00000198786                     0   .                     3\nENSG00000198695                     0   .                     5\nENSG00000198727                     0   .                    49\n```\n\n\n:::\n:::\n\n\nOf course, also the image is included:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimgRaster(spe) |> plot()\n```\n\n::: {.cell-output-display}\n![](day1-1_SpatialExperiment_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nAnd the slot for `reducedDims` is empty, as we didn't perform any dimensionality reduction calculations yet:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreducedDims(spe)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of length 0\nnames(0): \n```\n\n\n:::\n:::\n\n:::\n\nTo get a visual overview of what part of the slide is covered with spots we can use `ggspavis::plotVisium`. First without spots:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotVisium(spe, spots = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `aes_string()` was deprecated in ggplot2 3.0.0.\nℹ Please use tidy evaluation idioms with `aes()`.\nℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\nℹ The deprecated feature was likely used in the ggspavis package.\n  Please report the issue at <https://github.com/lmweber/ggspavis/issues>.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](day1-1_SpatialExperiment_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nAnd with spots:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotVisium(spe) \n```\n\n::: {.cell-output-display}\n![](day1-1_SpatialExperiment_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n::: callout-important\n## Exercise\n\nCheck out the usage of `plotVisium` with `?plotVisium`. Create a plot that zooms in into the spots, and colors the spots according to column `array_row`.\n\nIn which slot is `array_row` stored and what does it represent?\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Answer\n\nThe column `array_row` is stored in `colData`, it represents in which row the spot is positioned. Of course, plotting this value is not particularly useful for biology. We will visualize more sensible values in the next chapter, when we do the quality control.\n\nWe can use the argument `annotate` to color according to a column in `colData`, and we can zoom in by specifying `zoom = TRUE`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- plotVisium(spe, annotate = \"array_row\", zoom = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in guide(title = annotate, order = 1, override.aes = list(col = NA, : Arguments in `...` must be used.\n✖ Problematic argument:\n• override.aes = list(col = NA, size = 3)\nℹ Did you misspell an argument name?\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `aes_string()` was deprecated in ggplot2 3.0.0.\nℹ Please use tidy evaluation idioms with `aes()`.\nℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\nℹ The deprecated feature was likely used in the ggspavis package.\n  Please report the issue at <https://github.com/lmweber/ggspavis/issues>.\n```\n\n\n:::\n\n```{.r .cell-code}\np\n```\n\n::: {.cell-output-display}\n![](day1-1_SpatialExperiment_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n:::\n\n<!-- ## `spatialCoords` -->\n\n<!-- ```{r} -->\n\n<!-- # Display the head of the spatial coordinates, which represent the (x, y) locations of each spot. -->\n\n<!-- head(spatialCoords(spe)) -->\n\n<!-- # List the names of the spatial coordinate columns. -->\n\n<!-- spatialCoordsNames(spe) -->\n\n<!-- ``` -->\n\n<!-- ## `imgData` -->\n\n<!-- ```{r} -->\n\n<!-- # Display the image data associated with the SpatialExperiment object. -->\n\n<!-- imgData(spe) -->\n\n<!-- ``` -->\n\n<!-- ### `SpatialImage` class -->\n\n<!-- ```{r} -->\n\n<!-- # Extract the SpatialImage object from the SpatialExperiment object. -->\n\n<!-- spi <- getImg(spe) -->\n\n<!-- spi -->\n\n<!-- # Plot the raster image from the SpatialImage object. -->\n\n<!-- plot(imgRaster(spe)) -->\n\n<!-- ``` -->\n\n<!-- ## Question 1 -->\n\n<!-- **How would you extract the image data for a specific sample and image ID, for example, 'sample01' and 'lowres'?** -->\n\n<!-- :::{.callout-tip collapse=\"true\"} -->\n\n<!-- ### Answer -->\n\n<!-- # Extract the image data for 'sample01' and 'lowres' image ID. -->\n\n<!-- getImg(spe, sample_id = \"sample01\", image_id = \"lowres\") -->\n\n<!-- ``` -->\n\n<!-- ::: -->\n\n<!-- # Operations on `SpatialExperiment` -->\n\n<!-- ## subset by `sample_id` -->\n\n<!-- ```{r} -->\n\n<!-- # Subset the SpatialExperiment object to include only observations from 'sample01'. -->\n\n<!-- sub <- spe[, spe$sample_id == \"sample01\"] -->\n\n<!-- ``` -->\n\n<!-- ## Question 2 -->\n\n<!-- **How would you subset the `SpatialExperiment` object to only include spots where the `in_tissue` column in `colData` is `TRUE`?** -->\n\n<!-- :::{.callout-tip collapse=\"true\"} -->\n\n<!-- ### Answer -->\n\n<!-- # Subset the SpatialExperiment object to retain only spots that are within the tissue area. -->\n\n<!-- spe_in_tissue <- spe[, colData(spe)$in_tissue] -->\n\n<!-- # Verify the number of spots after subsetting. -->\n\n<!-- sum(colData(spe)$in_tissue) == ncol(spe_in_tissue) -->\n\n<!-- ``` -->\n\n<!-- ::: -->\n\n<!-- ## retain only observations that map to tissue -->\n\n<!-- ```{r} -->\n\n<!-- # Subset the SpatialExperiment object to retain only spots that are within the tissue area. -->\n\n<!-- sub <- spe[, colData(spe)$in_tissue] -->\n\n<!-- # Verify that the number of columns in the subsetted object matches the count of 'in_tissue' spots. -->\n\n<!-- sum(colData(spe)$in_tissue) == ncol(sub) -->\n\n<!-- ``` -->\n\n<!-- ## Combining samples -->\n\n<!-- ```{r} -->\n\n<!-- # Create two copies of the SpatialExperiment object. -->\n\n<!-- spe1 <- spe2 <- spe -->\n\n<!-- # Combine the two SpatialExperiment objects column-wise (samples). -->\n\n<!-- spe3 <- cbind(spe1, spe2) -->\n\n<!-- # Display the unique sample IDs in the combined object. -->\n\n<!-- unique(spe3$sample_id) -->\n\n<!-- ``` -->\n\n<!-- ## Question 3 -->\n\n<!-- **Imagine you have three `SpatialExperiment` objects (`spe1`, `spe2`, `spe3`). How would you combine all three into a single object?** -->\n\n<!-- :::{.callout-tip collapse=\"true\"} -->\n\n<!-- ### Answer -->\n\n<!-- # Create three SpatialExperiment objects (for demonstration). -->\n\n<!-- spe1_q3 <- spe2_q3 <- spe3_q3 <- spe -->\n\n<!-- # Combine all three SpatialExperiment objects. -->\n\n<!-- spe_combined_q3 <- cbind(spe1_q3, spe2_q3, spe3_q3) -->\n\n<!-- # Display unique sample IDs in the combined object. -->\n\n<!-- unique(spe_combined_q3$sample_id) -->\n\n<!-- ``` -->\n\n<!-- ::: -->\n\n<!-- ## Image transformation -->\n\n<!-- ### Rotation -->\n\n<!-- ```{r} -->\n\n<!-- # Extract the first image from the SpatialExperiment object. -->\n\n<!-- spi <- getImg(spe) -->\n\n<!-- # Apply counter-clockwise (-90 degrees) and clockwise (+90 degrees) rotations to the image. -->\n\n<!-- spi1 <- rotateImg(spi, -90) -->\n\n<!-- spi2 <- rotateImg(spi, +90) -->\n\n<!-- # Visualize the original and rotated images for comparison. -->\n\n<!-- par(mfrow = c(1, 3)) -->\n\n<!-- plot(as.raster(spi)) -->\n\n<!-- plot(as.raster(spi1)) -->\n\n<!-- plot(as.raster(spi2)) -->\n\n<!-- ``` -->\n\n<!-- ```{r} -->\n\n<!-- # Specify the sample and image identifiers for targeted rotation. -->\n\n<!-- sid <- \"sample01\" -->\n\n<!-- iid <- \"lowres\" -->\n\n<!-- # Apply a counter-clockwise rotation of -90 degrees to the specified image within the SpatialExperiment object. -->\n\n<!-- tmp <- rotateImg(spe, -->\n\n<!--   sample_id = sid, -->\n\n<!--   image_id = iid, -->\n\n<!--   degrees = -90 -->\n\n<!-- ) -->\n\n<!-- # Visualize the original and rotated images for the specified sample and image ID. -->\n\n<!-- par(mfrow = c(1, 2)) -->\n\n<!-- plot(imgRaster(spe, sid, iid)) -->\n\n<!-- plot(imgRaster(tmp, sid, iid)) -->\n\n<!-- ``` -->\n\n<!-- ### Mirroring -->\n\n<!-- ```{r} -->\n\n<!-- # Extract the first image from the SpatialExperiment object. -->\n\n<!-- spi <- getImg(spe) -->\n\n<!-- # Mirror the image horizontally (\"h\") and vertically (\"v\"). -->\n\n<!-- spi1 <- mirrorImg(spi, \"h\") -->\n\n<!-- spi2 <- mirrorImg(spi, \"v\") -->\n\n<!-- # Visualize the original and mirrored images for comparison. -->\n\n<!-- par(mfrow = c(1, 3)) -->\n\n<!-- plot(as.raster(spi)) -->\n\n<!-- plot(as.raster(spi1)) -->\n\n<!-- plot(as.raster(spi2)) -->\n\n<!-- ``` -->\n\n<!-- ```{r} -->\n\n<!-- # Specify the sample and image identifiers for targeted mirroring. -->\n\n<!-- sid <- \"sample01\" -->\n\n<!-- iid <- \"lowres\" -->\n\n<!-- # Mirror the specified image horizontally within the SpatialExperiment object. -->\n\n<!-- tmp <- mirrorImg(spe, -->\n\n<!--   sample_id = sid, -->\n\n<!--   image_id = iid, -->\n\n<!--   axis = \"h\" -->\n\n<!-- ) -->\n\n<!-- plot(imgRaster(tmp, sid, iid)) -->\n\n<!-- ``` -->\n\n<!-- ## Question 4 -->\n\n<!-- **How would you first rotate an image by 90 degrees clockwise and then mirror it horizontally?** -->\n\n<!-- :::{.callout-tip collapse=\"true\"} -->\n\n<!-- ### Answer -->\n\n<!-- # Extract the first image. -->\n\n<!-- spi_q4 <- getImg(spe) -->\n\n<!-- # First, rotate the image by 90 degrees clockwise. -->\n\n<!-- rotated_spi_q4 <- rotateImg(spi_q4, degrees = 90) -->\n\n<!-- # Then, mirror the rotated image horizontally. -->\n\n<!-- final_transformed_spi_q4 <- mirrorImg(rotated_spi_q4, axis = \"h\") -->\n\n<!-- # Visualize the original, rotated, and final transformed images. -->\n\n<!-- par(mfrow = c(1, 3)) -->\n\n<!-- plot(as.raster(spi_q4)) -->\n\n<!-- plot(as.raster(rotated_spi_q4)) -->\n\n<!-- plot(as.raster(final_transformed_spi_q4)) -->\n\n<!-- ``` -->\n\n<!-- ::: -->\n\n# Save the object\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndir.create(\"results\", showWarnings = FALSE)\nqs_save(spe, file = \"results/01_spe.qs2\")\n```\n:::\n\n\nClear your environment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = ls())\ngc()\n.rs.restartR()\n```\n:::\n\n\n::: callout-important\n**Key Takeaways:**\n\n-   The `SpatialExperiment` object is a versatile container for spatial transcriptomics data.\n-   It allows for easy access and manipulation of spatial coordinates, image data, and assay data.\n-   Various operations like subsetting, combining, and image transformations can be performed efficiently.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}