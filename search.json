[
  {
    "objectID": "qmd/reference_guide.html",
    "href": "qmd/reference_guide.html",
    "title": "Epigenetic Analysis Reference Guide",
    "section": "",
    "text": "This document provides comprehensive reference tables for interpreting chromatin accessibility (ATAC-seq), histone modifications, RNA expression, and DNA methylation patterns in epigenetic analysis. Each table represents different combinations of assays and their biological interpretations.\n\n\n\nATAC-seq: Assay for Transposase-Accessible Chromatin using sequencing\nH3K4me1: Histone H3 lysine 4 monomethylation (enhancer mark)\nH3K4me3: Histone H3 lysine 4 trimethylation (active promoter mark)\nH3K27ac: Histone H3 lysine 27 acetylation (active enhancer/promoter mark)\nH3K27me3: Histone H3 lysine 27 trimethylation (Polycomb repressive mark)\nRNA-seq: RNA sequencing (gene expression)\nDNAme: DNA methylation (CpG methylation)\nTSS: Transcription Start Site\n\n\n\n\n\n↑: Increased signal/activity\n↓: Decreased signal/activity\n∼: Low level or no significant change\nN/A: Not applicable\n-: No change or not detected"
  },
  {
    "objectID": "qmd/reference_guide.html#key-abbreviations",
    "href": "qmd/reference_guide.html#key-abbreviations",
    "title": "Epigenetic Analysis Reference Guide",
    "section": "",
    "text": "ATAC-seq: Assay for Transposase-Accessible Chromatin using sequencing\nH3K4me1: Histone H3 lysine 4 monomethylation (enhancer mark)\nH3K4me3: Histone H3 lysine 4 trimethylation (active promoter mark)\nH3K27ac: Histone H3 lysine 27 acetylation (active enhancer/promoter mark)\nH3K27me3: Histone H3 lysine 27 trimethylation (Polycomb repressive mark)\nRNA-seq: RNA sequencing (gene expression)\nDNAme: DNA methylation (CpG methylation)\nTSS: Transcription Start Site"
  },
  {
    "objectID": "qmd/reference_guide.html#legend",
    "href": "qmd/reference_guide.html#legend",
    "title": "Epigenetic Analysis Reference Guide",
    "section": "",
    "text": "↑: Increased signal/activity\n↓: Decreased signal/activity\n∼: Low level or no significant change\nN/A: Not applicable\n-: No change or not detected"
  },
  {
    "objectID": "qmd/course_schedule.html",
    "href": "qmd/course_schedule.html",
    "title": "Course schedule",
    "section": "",
    "text": "Note\n\n\n\nApart from the starting time the time schedule is indicative. Because we can not plan a course by the minute, in practice the time points will deviate."
  },
  {
    "objectID": "qmd/course_schedule.html#day-1",
    "href": "qmd/course_schedule.html#day-1",
    "title": "Course schedule",
    "section": "Day 1",
    "text": "Day 1\n\n\n\n\n\n\n\n\n\n\n\n\nblock\nstart\nend\ntopic\ninstructor\npresentation\nexercise\n\n\n\n\nintroduction\n9:15\n9:45\nintroduction to the course\n\n\n\n\n\nblock 1\n9:45\n10:30\nintroduction to spatial omics\n\n\n\n\n\nbreak\n10:30\n10:45\n\n\n\n\n\n\nblock 2\n10:45\n12:30\nData structure + quality control + normalization and scaling\n\n\n\n\n\nbreak\n12:30\n13:30\n\n\n\n\n\n\nblock 3\n1:30\n3:00\nExercises quality control\n\n\n\n\n\nbreak\n3:00\n3:15\n\n\n\n\n\n\nblock 4\n3:15\n5:15\nFeature selection, dimensionality reduction and clustering"
  },
  {
    "objectID": "qmd/course_schedule.html#day-2",
    "href": "qmd/course_schedule.html#day-2",
    "title": "Course schedule",
    "section": "Day 2",
    "text": "Day 2\n\n\n\n\n\n\n\n\n\n\n\n\nblock\nstart\nend\ntopic\ninstructor\npresentation\nexercise\n\n\n\n\nblock 1\n9:15\n10:30\nSpatial statistics\nMartin Emonts\n\n\n\n\nbreak\n10:30\n10:45\n\n\n\n\n\n\nblock 2\n10:45\n12:30\nDESpace\nPeiying Cai\n\n\n\n\nbreak\n12:30\n13:30\n\n\n\n\n\n\nblock 3\n1:30\n3:00\nMultiple samples DESpace, differential colocalization\n\n\n\n\n\nbreak\n3:00\n3:15\n\n\n\n\n\n\nblock 4\n3:15\n5:15\nDeconvolution"
  },
  {
    "objectID": "index.html#license-copyright",
    "href": "index.html#license-copyright",
    "title": "Introduction to Sequencing-based Spatial Transcriptomics Data Analysis",
    "section": "License & copyright",
    "text": "License & copyright\nLicense: CC BY 4.0\nCopyright: SIB Swiss Institute of Bioinformatics"
  },
  {
    "objectID": "index.html#learning-outcomes",
    "href": "index.html#learning-outcomes",
    "title": "Introduction to Sequencing-based Spatial Transcriptomics Data Analysis",
    "section": "Learning outcomes",
    "text": "Learning outcomes\n\nGeneral learning outcomes\nAt the end of the course, the participants are expected to:\n\nExplain the principles and describe applications of sequencing-based spatially-resolved transcriptomics (SRT)\nDefine the differences between sequencing-based SRT methods and imaging-based SRT methods.\nIdentify potential pitfalls and limitations of sequencing-based SRT experiments and analysis workflows.\nAssess and interpret raw sequencing outputs and spatial metadata files, understanding their structure and relevance for downstream analyses.\nDefine important aspects of quality control, feature selection, dimensionality reduction and differentail gene expression to SRT data and apply those.\nClarify various spatial statistics and their application to biological questions.\nUse frequently-used methods to analyze multi-sample SRT experiments.\n\n\n\nLearning outcomes explained\nTo reach the general learning outcomes above, we have set a number of smaller learning outcomes. Each chapter starts with these smaller learning outcomes. Use these at the start of a chapter to get an idea what you will learn. Use them also at the end of a chapter to evaluate whether you have learned what you were expected to learn."
  },
  {
    "objectID": "index.html#learning-experiences",
    "href": "index.html#learning-experiences",
    "title": "Introduction to Sequencing-based Spatial Transcriptomics Data Analysis",
    "section": "Learning experiences",
    "text": "Learning experiences\nTo reach the learning outcomes we will use lectures, exercises, polls and group work. During exercises, you are free to discuss with other participants. During lectures, focus on the lecture only.\n\nExercises\nEach block has practical work involved. Some more than others. The practicals are subdivided into chapters, and we’ll have a (short) discussion after each chapter. All answers to the practicals are incorporated, but they are hidden. Do the exercise first by yourself, before checking out the answer. If your answer is different from the answer in the practicals, try to figure out why they are different."
  },
  {
    "objectID": "day1/day1-2_spotsweeper_qc.html",
    "href": "day1/day1-2_spotsweeper_qc.html",
    "title": "Exercise 2",
    "section": "",
    "text": "In this second exercise, we will focus on the critical step of quality control (QC) for spatial transcriptomics data. Using the SpotSweeper package, we will learn how to identify and handle low-quality spots and spatial artifacts, which is essential for ensuring the reliability of downstream analyses. We will calculate various QC metrics, detect local outliers, and visualize the results to gain a comprehensive understanding of data quality."
  },
  {
    "objectID": "day1/day1-2_spotsweeper_qc.html#quality-control-using-spotsweeper",
    "href": "day1/day1-2_spotsweeper_qc.html#quality-control-using-spotsweeper",
    "title": "Exercise 2",
    "section": "",
    "text": "In this second exercise, we will focus on the critical step of quality control (QC) for spatial transcriptomics data. Using the SpotSweeper package, we will learn how to identify and handle low-quality spots and spatial artifacts, which is essential for ensuring the reliability of downstream analyses. We will calculate various QC metrics, detect local outliers, and visualize the results to gain a comprehensive understanding of data quality."
  },
  {
    "objectID": "day1/day1-2_spotsweeper_qc.html#learning-objectives",
    "href": "day1/day1-2_spotsweeper_qc.html#learning-objectives",
    "title": "Exercise 2",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nBy the end of this exercise, you will be able to:\n\nLoad a SpatialExperiment object from a .qs file.\nCalculate per-spot QC metrics.\nIdentify local outliers based on various QC metrics.\nDetect spatial artifacts using SpotSweeper.\nVisualize QC metrics and detected artifacts."
  },
  {
    "objectID": "day1/day1-2_spotsweeper_qc.html#question-1",
    "href": "day1/day1-2_spotsweeper_qc.html#question-1",
    "title": "Exercise 2",
    "section": "Question 1",
    "text": "Question 1\nHow many spots were identified as local outliers based on the combined criteria?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n# Count the number of spots flagged as local outliers.\ntable(spe$local_outliers)"
  },
  {
    "objectID": "day1/day1-2_spotsweeper_qc.html#question-3",
    "href": "day1/day1-2_spotsweeper_qc.html#question-3",
    "title": "Exercise 2",
    "section": "Question 3",
    "text": "Question 3\nPlot the spatial distribution of the artifact column identified by SpotSweeper.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n# Plot the spatial distribution of the detected artifacts.\nplotQCmetrics(spe,\n    metric = \"subsets_Mito_percent\", # You can choose any relevant metric to display\n    outliers = \"artifact\", \n    point_size = 1.1\n) +\n    ggtitle(\"Detected Spatial Artifacts\")\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nKey Takeaways:\n\nscuttle::addPerCellQCMetrics provides essential per-spot QC metrics.\nSpotSweeper::localOutliers helps identify individual problematic spots.\nSpotSweeper::findArtifacts is powerful for detecting spatially coherent regions of poor quality.\nVisualizing QC results is critical for data interpretation and downstream analysis decisions."
  },
  {
    "objectID": "day1/day1-1_SpatialExperiment.html",
    "href": "day1/day1-1_SpatialExperiment.html",
    "title": "Exercise 1",
    "section": "",
    "text": "By the end of this exercise, you will be able to:\n\nUnderstand the structure of a SpatialExperiment object.\nAccess and interpret spatialCoords and imgData.\nPerform basic subsetting operations on SpatialExperiment objects.\nCombine multiple SpatialExperiment objects.\nApply image transformations (rotation, mirroring) to spatial data."
  },
  {
    "objectID": "day1/day1-1_SpatialExperiment.html#learning-objectives",
    "href": "day1/day1-1_SpatialExperiment.html#learning-objectives",
    "title": "Exercise 1",
    "section": "",
    "text": "By the end of this exercise, you will be able to:\n\nUnderstand the structure of a SpatialExperiment object.\nAccess and interpret spatialCoords and imgData.\nPerform basic subsetting operations on SpatialExperiment objects.\nCombine multiple SpatialExperiment objects.\nApply image transformations (rotation, mirroring) to spatial data."
  },
  {
    "objectID": "day1/day1-1_SpatialExperiment.html#libraries",
    "href": "day1/day1-1_SpatialExperiment.html#libraries",
    "title": "Exercise 1",
    "section": "Libraries",
    "text": "Libraries\n\n# Load necessary R libraries for spatial transcriptomics data analysis.\n# library(DropletUtils)\n# library(BumpyMatrix)\nlibrary(SpatialExperiment)\nlibrary(VisiumIO)\n# library(arrow)\nlibrary(qs2)\nlibrary(ggspavis)\nlibrary(patchwork)\nlibrary(dplyr)"
  },
  {
    "objectID": "day1/day1-1_SpatialExperiment.html#data-for-the-course",
    "href": "day1/day1-1_SpatialExperiment.html#data-for-the-course",
    "title": "Exercise 1",
    "section": "Data for the course",
    "text": "Data for the course\nWe start with downloading the data. We will work with VisiumHD data from human colon cancer. The full dataset is available here. It’s a Visium HD dataset from human colon cancer.\n\nWe need more explanation here!\n\n\nif (!dir.exists(\"data/Human_Colon_Cancer_P1/binned_outputs/\")) {\n  dir.create(\"data\")\n  download.file(\n    url = \"https://seq-spatial-transcriptomics-training.s3.eu-central-1.amazonaws.com/Human_Colon_Cancer_P1.tar.gz\",\n    destfile = \"Human_Colon_Cancer_P1.tar.gz\"\n  )\n\n  untar(\n    tarfile = \"data/Human_Colon_Cancer_P1.tar.gz\"\n  )\n\n  file.remove(\"data/Human_Colon_Cancer_P1.tar.gz\")\n} else {\n  message(\"Data exists, please proceed to next steps!\")\n}\n\nData exists, please proceed to next steps!\n\n\nWe will import a part of the downloaded files to create a SpatialExperiment object. For these exercises, we choose to use the largest bin size of 16 µm:\n\n# Import Visium HD data from Space Ranger output into a SpatialExperiment object.\nspe &lt;- TENxVisiumHD(\n  spacerangerOut = \"data/Human_Colon_Cancer_P1/\",\n  processing = \"filtered\",\n  format = \"h5\",\n  images = \"lowres\",\n  bin_size = \"016\"\n) |&gt;\n  import()\n\n# we will subset the dataset for computational and visual reasons\nspe &lt;- spe[, spatialCoords(spe)[, 1] * scaleFactors(spe) &gt; 70 &\n               spatialCoords(spe)[, 1] * scaleFactors(spe) &lt; 130 &\n               spatialCoords(spe)[, 2] * scaleFactors(spe) &gt; 200 &\n               spatialCoords(spe)[, 2] * scaleFactors(spe) &lt; 260]\n\n\n\n\n\n\n\nExercise\n\n\n\nWhat other bin size do we have available?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nCheck out data/Human_Colon_Cancer_P1/binned_outputs. Here you will find three directories:\nsquare_002um\nsquare_008um\nsquare_016um\nSo in addition to 16 µm, we also have 2 and 8 µm available."
  },
  {
    "objectID": "day1/day1-1_SpatialExperiment.html#exploring-the-object",
    "href": "day1/day1-1_SpatialExperiment.html#exploring-the-object",
    "title": "Exercise 1",
    "section": "Exploring the object",
    "text": "Exploring the object\nIn this first exercise, we will dive into the SpatialExperiment object, a cornerstone of spatial transcriptomics analysis in R. We will learn how to load Visium HD data, explore the different components of the object, and perform basic manipulations. By the end of this session, you will have a solid understanding of how to handle spatial transcriptomics data within the R/Bioconductor ecosystem.\n\n\n\nOverview of the SpatialExperiment class structure\n\n\nThe different slots of the SpatialExperiment object can be approached with several helper functions that correspond with their names.\n\n\n\n\n\n\nExercise\n\n\n\nCheck out the outputs of running the following functions:\n\ncolData()\nspatialCoords()\nrowData()\nassay()\nimgRaster()\nreducedDims()\n\nQuestions:\n\nWhat kind of data is in the different slots?\nHow many spots and genes do we have?\nAre spots in the tissue?\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nThe slot colData contains metadata of each of the 14207 spots:\n\ncolData(spe) |&gt; head()\n\nDataFrame with 6 rows and 6 columns\n                                    barcode in_tissue array_row array_col\n                                &lt;character&gt; &lt;integer&gt; &lt;integer&gt; &lt;integer&gt;\ns_016um_00144_00175-1 s_016um_00144_00175-1         1       144       175\ns_016um_00204_00145-1 s_016um_00204_00145-1         1       204       145\ns_016um_00191_00159-1 s_016um_00191_00159-1         1       191       159\ns_016um_00111_00233-1 s_016um_00111_00233-1         1       111       233\ns_016um_00202_00235-1 s_016um_00202_00235-1         1       202       235\ns_016um_00102_00186-1 s_016um_00102_00186-1         1       102       186\n                         bin_size   sample_id\n                      &lt;character&gt; &lt;character&gt;\ns_016um_00144_00175-1         016    sample01\ns_016um_00204_00145-1         016    sample01\ns_016um_00191_00159-1         016    sample01\ns_016um_00111_00233-1         016    sample01\ns_016um_00202_00235-1         016    sample01\ns_016um_00102_00186-1         016    sample01\n\nncol(spe)\n\n[1] 14207\n\n\nWe also have the column in_tissue here, and we can check whether all the spots are in the tissue:\n\ncolData(spe) |&gt; as.data.frame() |&gt;\n  group_by(in_tissue) |&gt; summarise(number = n())\n\n# A tibble: 1 × 2\n  in_tissue number\n      &lt;int&gt;  &lt;int&gt;\n1         1  14207\n\n\nThe slot spatialCoords maps each spot to the full resolution image:\n\nspatialCoords(spe) |&gt; head()\n\n                      pxl_col_in_fullres pxl_row_in_fullres\ns_016um_00144_00175-1          10076.365           28256.34\ns_016um_00204_00145-1           8356.073           24733.65\ns_016um_00191_00159-1           9167.045           25500.94\ns_016um_00111_00233-1          13447.496           30216.22\ns_016um_00202_00235-1          13613.955           24899.03\ns_016um_00102_00186-1          10696.244           30716.82\n\n\nThe slot rowData contains metadata about the 18085 genes for which we measured expression:\n\nrowData(spe) |&gt; head()\n\nDataFrame with 6 rows and 3 columns\n                             ID      Symbol            Type\n                    &lt;character&gt; &lt;character&gt;        &lt;factor&gt;\nENSG00000187634 ENSG00000187634      SAMD11 Gene Expression\nENSG00000188976 ENSG00000188976       NOC2L Gene Expression\nENSG00000187961 ENSG00000187961      KLHL17 Gene Expression\nENSG00000187583 ENSG00000187583     PLEKHN1 Gene Expression\nENSG00000187642 ENSG00000187642       PERM1 Gene Expression\nENSG00000188290 ENSG00000188290        HES4 Gene Expression\n\nnrow(spe)\n\n[1] 18085\n\n\nThe assay is the core matrix of the object. Corresponding to the genes (rows) and spots (columns):\n\nassay(spe)\n\n&lt;18085 x 14207&gt; sparse DelayedMatrix object of type \"integer\":\n                s_016um_00144_00175-1 ... s_016um_00109_00223-1\nENSG00000187634                     0   .                     0\nENSG00000188976                     0   .                     0\nENSG00000187961                     0   .                     0\nENSG00000187583                     0   .                     0\nENSG00000187642                     0   .                     0\n            ...                     .   .                     .\nENSG00000212907                     7   .                     5\nENSG00000198886                    29   .                    15\nENSG00000198786                     0   .                     1\nENSG00000198695                     2   .                     1\nENSG00000198727                    11   .                    11\n\n\nOf course, also the image is included:\n\nimgRaster(spe) |&gt; plot()\n\n\n\n\n\n\n\n\nAnd the slot for reducedDims is empty, as we didn’t perform any dimensionality reduction calculations yet:\n\nreducedDims(spe)\n\nList of length 0\nnames(0): \n\n\n\n\n\nWe saw that the rownames of the object were Ensembl IDs. However, for most purposes it’s easier to have gene symbols. Therefore, we replace the ensembl IDs, with the symbols stored in rowData:\n\nrownames(spe) &lt;- rowData(spe)$Symbol\n\nTo get a visual overview of what part of the slide is covered with spots we can use ggspavis::plotVisium. First without spots:\n\nplotVisium(spe, spots = FALSE)\n\n\n\n\n\n\n\n\nAnd with spots:\n\nplotVisium(spe, point_shape = 22, point_size = 0.5) \n\n\n\n\n\n\n\n\nColoured by e.g. gene expression:\n\nplotVisium(spe, annotate = \"PIGR\", zoom = TRUE, point_size = 1,\n                point_shape = 22)\n\nWarning in guide(title = annotate, order = 1, override.aes = list(col = NA, : Arguments in `...` must be used.\n✖ Problematic argument:\n• override.aes = list(col = NA, size = 3)\nℹ Did you misspell an argument name?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nCheck out the usage of plotVisium with ?plotVisium. Create a plot that zooms in into the spots, and colors the spots according to column array_row.\nIn which slot is array_row stored and what does it represent?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nThe column array_row is stored in colData, it represents in which row the spot is positioned. Of course, plotting this value is not particularly useful for biology. We will visualize more sensible values in the next chapter, when we do the quality control.\nWe can use the argument annotate to color according to a column in colData, and we can zoom in by specifying zoom = TRUE:\n\np &lt;- plotVisium(spe, annotate = \"array_row\", zoom = TRUE, point_shape = 22)\n\nWarning in guide(title = annotate, order = 1, override.aes = list(col = NA, : Arguments in `...` must be used.\n✖ Problematic argument:\n• override.aes = list(col = NA, size = 3)\nℹ Did you misspell an argument name?\n\np"
  },
  {
    "objectID": "day1/day1-3_feature_dimred_cluster.html",
    "href": "day1/day1-3_feature_dimred_cluster.html",
    "title": "Exercise 3",
    "section": "",
    "text": "In this third exercise, we will explore the essential techniques of feature selection, dimensionality reduction, and clustering to uncover meaningful biological insights from spatial transcriptomics data. We will learn how to identify the most informative genes, visualize complex high-dimensional data in lower-dimensional spaces using methods like PCA and UMAP, and group spots into clusters representing distinct spatial domains. These steps are fundamental for interpreting the underlying biological structure of the tissue."
  },
  {
    "objectID": "day1/day1-3_feature_dimred_cluster.html#feature-selection-dimensionality-reduction-and-clustering",
    "href": "day1/day1-3_feature_dimred_cluster.html#feature-selection-dimensionality-reduction-and-clustering",
    "title": "Exercise 3",
    "section": "",
    "text": "In this third exercise, we will explore the essential techniques of feature selection, dimensionality reduction, and clustering to uncover meaningful biological insights from spatial transcriptomics data. We will learn how to identify the most informative genes, visualize complex high-dimensional data in lower-dimensional spaces using methods like PCA and UMAP, and group spots into clusters representing distinct spatial domains. These steps are fundamental for interpreting the underlying biological structure of the tissue."
  },
  {
    "objectID": "day1/day1-3_feature_dimred_cluster.html#learning-objectives",
    "href": "day1/day1-3_feature_dimred_cluster.html#learning-objectives",
    "title": "Exercise 3",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nBy the end of this exercise, you will be able to:\n\nPerform feature selection to identify highly variable genes (HVGs).\nApply dimensionality reduction techniques like PCA and UMAP.\nPerform clustering to identify distinct spatial domains or cell populations.\nVisualize the results of dimensionality reduction and clustering in both reduced dimension space and spatial context."
  },
  {
    "objectID": "day1/day1-3_feature_dimred_cluster.html#libraries",
    "href": "day1/day1-3_feature_dimred_cluster.html#libraries",
    "title": "Exercise 3",
    "section": "Libraries",
    "text": "Libraries\n\nlibrary(SpatialExperiment)\nlibrary(qs2)\nlibrary(scran) # For feature selection and clustering\nlibrary(scater) # For dimensionality reduction\nlibrary(ggplot2)\nlibrary(patchwork) # For combining plots\nlibrary(bluster) # For clustering\nlibrary(escheR) # For spatial plotting\nlibrary(pheatmap) # For clustering heatmap"
  },
  {
    "objectID": "day1/day1-3_feature_dimred_cluster.html#load-and-prepare-data",
    "href": "day1/day1-3_feature_dimred_cluster.html#load-and-prepare-data",
    "title": "Exercise 3",
    "section": "Load and Prepare Data",
    "text": "Load and Prepare Data\nWe will start by loading the SpatialExperiment object and performing the necessary preprocessing steps, including subsetting for demonstration purposes, similar to the previous exercise.\n\n# Load the SpatialExperiment object from the .qs2 file.\nspe &lt;- qs2::qs_read(\"results/01_spe.qs2\", nthreads = 1)\n\n# Change row names from gene IDs to gene symbols.\nrownames(spe) &lt;- rowData(spe)$Symbol\n\n# Identify mitochondrial transcripts.\nis.mito &lt;- rownames(spe)[grepl(\"^MT-\", rownames(spe))]\n\n# Calculate per-spot QC metrics.\nspe &lt;- scuttle::addPerCellQCMetrics(spe, subsets = list(Mito = is.mito))\n\nLoading required namespace: HDF5Array\n\n# Subsetting for Demonstration (to reduce computation time)\nset.seed(123) # for reproducibility\nnum_genes_to_keep &lt;- 10000\nif (nrow(spe) &gt; num_genes_to_keep) {\n  gene_indices &lt;- sample(seq_len(nrow(spe)), num_genes_to_keep)\n  spe_subset &lt;- spe[gene_indices, ]\n} else {\n  spe_subset &lt;- spe\n}\n\nnum_spots_to_keep &lt;- 10000\nif (ncol(spe_subset) &gt; num_spots_to_keep) {\n  spot_indices &lt;- sample(seq_len(ncol(spe_subset)), num_spots_to_keep)\n  spe_subset &lt;- spe_subset[, spot_indices]\n} else {\n  spe_subset &lt;- spe_subset\n}\n\nspe &lt;- spe_subset\n\n# Remove spots with NA/NaN/Inf in mitochondrial QC metrics or spatial coordinates\nna_mito_percent &lt;- is.na(colData(spe)$subsets_Mito_percent)\nna_mito_sum &lt;- is.na(colData(spe)$subsets_Mito_sum)\nspots_to_remove_mito &lt;- na_mito_percent | na_mito_sum\nif (any(spots_to_remove_mito)) {\n  message(paste0(\"Removing \", sum(spots_to_remove_mito), \" spots with NA mitochondrial QC metrics.\"))\n  spe &lt;- spe[, !spots_to_remove_mito]\n}\n\nspatial_coords &lt;- spatialCoords(spe)\nproblematic_spatial_coords &lt;- apply(spatial_coords, 1, function(row) any(is.na(row) | is.nan(row) | is.infinite(row)))\nif (any(problematic_spatial_coords)) {\n  message(paste0(\"Removing \", sum(problematic_spatial_coords), \" spots with NA/NaN/Inf in spatial coordinates.\"))\n  spe &lt;- spe[, !problematic_spatial_coords]\n}\n\n# Remove spots with zero total counts, as these can cause issues with size factor calculation during normalization.\nzero_sum_spots &lt;- colSums(counts(spe)) == 0\nif (any(zero_sum_spots)) {\n  message(paste0(\"Removing \", sum(zero_sum_spots), \" spots with zero total counts.\"))\n  spe &lt;- spe[, !zero_sum_spots]\n}\n\n# Log-normalize counts for downstream analysis\nspe &lt;- logNormCounts(spe)\n\n\nSpatially-Aware Normalization (Optional)\nWhile logNormCounts provides a general-purpose normalization, specialized spatially-aware normalization methods exist (e.g., SpaNorm package). These methods aim to correct for technical variations while preserving true spatial biological patterns. Depending on the dataset and research question, exploring such advanced normalization techniques might be beneficial.\n\n\nSize Factor Analysis\n\nAfter log-normalization, we can inspect the computed size factors.\nSize factors account for differences in sequencing depth between spots.\n\n\n# Display a summary of the calculated size factors.\nsummary(sizeFactors(spe))\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n0.00541 0.43998 0.75374 1.00000 1.33257 5.24915 \n\n# Visualize the distribution of size factors using a histogram.\nhist(sizeFactors(spe),\n  breaks = 50, main = \"Histogram of Size Factors\",\n  xlab = \"Size Factor\"\n)\n\n\n\n\n\n\n\n# Display the dimensions of the prepared object\ndim(spe)\n\n[1] 10000 10000"
  },
  {
    "objectID": "day1/day1-3_feature_dimred_cluster.html#feature-selection",
    "href": "day1/day1-3_feature_dimred_cluster.html#feature-selection",
    "title": "Exercise 3",
    "section": "Feature Selection",
    "text": "Feature Selection\n\nHighly Variable Genes (HVGs)\nFeature selection is a crucial step to reduce noise and focus on genes that show significant biological variation across spots. We typically identify Highly Variable Genes (HVGs) as these are more likely to distinguish different cell types or spatial domains.\n\n# Model gene variance to identify highly variable genes.\n# This function fits a trend to the technical noise and calculates biological variance.\ndec &lt;- modelGeneVar(spe)\n\n# Select the top N highly variable genes.\n# The number of HVGs can influence downstream dimensionality reduction and clustering.\nhvg &lt;- getTopHVGs(dec, n = 2000) # Selecting top 2000 HVGs\n\n# Store HVG information in rowData\nrowData(spe)$hvg &lt;- rowData(spe)$Symbol %in% hvg\n\n# Display the number of HVGs identified\nsum(rowData(spe)$hvg)\n\n[1] 2000\n\n# Visualize the mean-variance relationship and the fitted trend.\n# This plot helps to understand how gene variability changes with expression level.\nplot(dec$mean, dec$total,\n  xlab = \"Mean expression (log-counts)\",\n  ylab = \"Total variance (log-counts)\",\n  main = \"Mean-Variance Trend\"\n)\ncurve(metadata(dec)$trend(x), add = TRUE, col = \"dodgerblue\", lwd = 2)"
  },
  {
    "objectID": "day1/day1-3_feature_dimred_cluster.html#question-1",
    "href": "day1/day1-3_feature_dimred_cluster.html#question-1",
    "title": "Exercise 3",
    "section": "Question 1",
    "text": "Question 1\nWhy is it important to perform feature selection (e.g., identifying HVGs) before dimensionality reduction and clustering in spatial transcriptomics data?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nFeature selection is important for several reasons:\n\nNoise Reduction: It helps to filter out genes that show little variation and are likely dominated by technical noise, thus improving the signal-to-noise ratio.\nComputational Efficiency: Reducing the number of features (genes) significantly decreases the computational burden for subsequent steps like dimensionality reduction and clustering, especially with large datasets.\nImproved Interpretation: By focusing on genes with high biological variability, we are more likely to identify meaningful biological patterns and distinctions between cell types or spatial domains.\nMitigating the Curse of Dimensionality: High-dimensional data can make it difficult for algorithms to find meaningful patterns; feature selection helps alleviate this.\n\n\n\n\n\nSpatially Variable Genes (SVGs)\nBeyond simply highly variable genes, in spatial transcriptomics, we are often interested in genes whose expression patterns vary significantly across the spatial dimensions. These are known as Spatially Variable Genes (SVGs).\nIdentifying SVGs can reveal genes that define distinct tissue regions, cell types, or biological processes with specific spatial localization.\nWhile several advanced methods and packages exist for SVG identification (e.g., nnSVG, SPARK-X, Giotto), implementing a full SVG analysis is beyond the scope of this introductory exercise. However, it’s important to be aware of this concept as a crucial step in spatial data analysis."
  },
  {
    "objectID": "day1/day1-3_feature_dimred_cluster.html#question-1.2",
    "href": "day1/day1-3_feature_dimred_cluster.html#question-1.2",
    "title": "Exercise 3",
    "section": "Question 1.2",
    "text": "Question 1.2\nHow do Spatially Variable Genes (SVGs) differ from Highly Variable Genes (HVGs), and why is identifying SVGs particularly important in spatial transcriptomics?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nHVGs (Highly Variable Genes): Genes that show high variability in expression across all spots/cells in a dataset, regardless of their spatial location. They are informative for distinguishing cell types or states in a general sense.\nSVGs (Spatially Variable Genes): Genes whose expression levels exhibit a non-random, structured pattern across the spatial coordinates of the tissue. Their variability is specifically linked to their position.\n\nIdentifying SVGs is particularly important in spatial transcriptomics because:\n\nReveals Spatial Organization: SVGs directly highlight genes that contribute to the spatial organization of the tissue, defining distinct anatomical regions or functional domains.\nBiological Insights: They can pinpoint genes involved in cell-cell communication, developmental gradients, or disease progression within a tissue context.\nTargeted Analysis: SVGs can be used for more targeted downstream analysis, focusing on genes that are most relevant to the spatial biology of interest."
  },
  {
    "objectID": "day1/day1-3_feature_dimred_cluster.html#dimensionality-reduction",
    "href": "day1/day1-3_feature_dimred_cluster.html#dimensionality-reduction",
    "title": "Exercise 3",
    "section": "Dimensionality Reduction",
    "text": "Dimensionality Reduction\nDimensionality reduction techniques project high-dimensional gene expression data into a lower-dimensional space, making it easier to visualize and analyze. This step is essential for identifying global patterns and preparing data for clustering.\n\nPrincipal Component Analysis (PCA)\nPCA is a linear dimensionality reduction technique that transforms the data into a new coordinate system such that the greatest variance by some projection of the data comes to lie on the first coordinate (called the first principal component), the second greatest variance on the second coordinate, and so on.\n\n# Run PCA on the highly variable genes.\n# We use the 'ncomponents' argument to specify the number of principal components to retain.\nspe &lt;- runPCA(spe, ncomponents = 50, subset_row = rowData(spe)$hvg)\n\n# Visualize the explained variance by each principal component.\n# This helps in determining how many PCs capture most of the variance.\nplot(attr(reducedDim(spe, \"PCA\"), \"percentVar\"),\n  xlab = \"PC\", ylab = \"Proportion of variance explained\",\n  main = \"PCA Scree Plot\"\n)\n\n\n\n\n\n\n\n# Visualize the PCA embedding.\n# This helps to see the main sources of variation in the data.\nplotPCA(spe, colour_by = \"sum\") +\n  ggtitle(\"PCA colored by Library Size\")"
  },
  {
    "objectID": "day1/day1-3_feature_dimred_cluster.html#question-2",
    "href": "day1/day1-3_feature_dimred_cluster.html#question-2",
    "title": "Exercise 3",
    "section": "Question 2",
    "text": "Question 2\nBased on the PCA scree plot, how would you determine an appropriate number of principal components to retain for downstream analysis? What are the trade-offs of choosing too few or too many PCs?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nAn appropriate number of principal components (PCs) can often be determined by looking for an “elbow point” in the scree plot, where the explained variance starts to level off. This point suggests that subsequent PCs explain much less variance and might represent noise rather than meaningful biological signal.\n\nToo few PCs: Might lead to a loss of important biological signal, as significant sources of variation could be discarded.\nToo many PCs: Can retain too much noise, potentially obscuring true biological patterns and increasing computational complexity for downstream steps like clustering.\n\n\n\n\n\nt-Distributed Stochastic Neighbor Embedding (t-SNE)\nt-SNE is another non-linear dimensionality reduction technique particularly well-suited for visualizing high-dimensional datasets. It aims to place similar data points close together in a low-dimensional map, while dissimilar points are placed far apart. It is especially good at revealing local structures in the data.\n\n# Run t-SNE on the PCA-reduced data.\n# Similar to UMAP, using PCA output as input to t-SNE is a common practice.\nspe &lt;- runTSNE(spe, dimred = \"PCA\")\n\n# Visualize the t-SNE embedding.\nplotTSNE(spe, colour_by = \"sum\") +\n  ggtitle(\"t-SNE colored by Library Size\")"
  },
  {
    "objectID": "day1/day1-3_feature_dimred_cluster.html#question-2.2",
    "href": "day1/day1-3_feature_dimred_cluster.html#question-2.2",
    "title": "Exercise 3",
    "section": "Question 2.2",
    "text": "Question 2.2\nHow does t-SNE differ from UMAP in its approach to dimensionality reduction, and what are the implications for interpreting their respective visualizations?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nt-SNE and UMAP are both non-linear dimensionality reduction techniques that aim to preserve local and global data structures. However, they differ in their underlying algorithms and how they balance these aspects:\n\nt-SNE: Focuses heavily on preserving local neighborhoods. It tends to create tightly packed clusters, but the distances between clusters in a t-SNE plot are often not meaningful. It can be computationally more intensive for very large datasets.\nUMAP: Aims to preserve both local and global structures more effectively than t-SNE. Distances between clusters in a UMAP plot are generally considered more meaningful, and it is often faster and scales better to larger datasets.\n\nImplications for interpretation:\n\nt-SNE: Excellent for revealing distinct, compact clusters. However, the relative sizes of clusters and distances between them should be interpreted with caution.\nUMAP: Often provides a more faithful representation of the overall data topology, making inter-cluster distances and relative densities more interpretable. It can sometimes produce more diffuse clusters than t-SNE.\n\nChoosing between them often depends on the specific goals of the visualization and the characteristics of the data.\n\n\n\n\nUniform Manifold Approximation and Projection (UMAP)\nUMAP is a non-linear dimensionality reduction technique that is particularly effective at preserving both local and global data structure, making it popular for visualizing complex single-cell and spatial transcriptomics data.\n\n# Run UMAP on the PCA-reduced data.\n# Using PCA output as input to UMAP is a common practice to denoise the data first.\nspe &lt;- runUMAP(spe, dimred = \"PCA\")\n\n# Visualize the UMAP embedding.\n# We can color the points by various metadata, for example, by library size.\nplotUMAP(spe, colour_by = \"sum\") +\n  ggtitle(\"UMAP colored by Library Size\")"
  },
  {
    "objectID": "day1/day1-3_feature_dimred_cluster.html#question-3",
    "href": "day1/day1-3_feature_dimred_cluster.html#question-3",
    "title": "Exercise 3",
    "section": "Question 3",
    "text": "Question 3\nCompare and contrast PCA and UMAP. In what scenarios would you prefer to use one over the other for visualizing spatial transcriptomics data?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nPCA (Principal Component Analysis): A linear method that identifies directions of maximal variance. It’s good for understanding global variance and can be interpreted as a denoising step. It preserves large-scale structures but can compress complex non-linear relationships.\nUMAP (Uniform Manifold Approximation and Projection): A non-linear method that aims to preserve both local and global data structure. It’s excellent for visualizing complex, high-dimensional data in 2D or 3D, often revealing distinct clusters more clearly.\n\nWhen to use which:\n\nPrefer PCA: For initial data exploration, denoising, and when linearity is assumed or desired. It’s also useful for understanding the main sources of variation.\nPrefer UMAP: For visualizing complex relationships, identifying distinct clusters, and when non-linear structures are expected. It’s often used after PCA to further reduce dimensions for visualization.\n\nFor spatial transcriptomics, UMAP is often preferred for visualization due to its ability to reveal distinct spatial domains or cell types that might have non-linear relationships in gene expression."
  },
  {
    "objectID": "day1/day1-3_feature_dimred_cluster.html#clustering",
    "href": "day1/day1-3_feature_dimred_cluster.html#clustering",
    "title": "Exercise 3",
    "section": "Clustering",
    "text": "Clustering\nClustering aims to group spots with similar gene expression profiles, which can correspond to distinct cell types or tissue regions. We will use a graph-based clustering approach, which is common in single-cell and spatial analyses. Other methods like k-means or hierarchical clustering are also available but may have different assumptions or computational properties.\n\n# Build a Shared Nearest Neighbor (SNN) graph based on the PCA-reduced data.\n# The k parameter defines the number of nearest neighbors to consider.\nsnn_graph &lt;- buildSNNGraph(spe, k = 10, use.dimred = \"PCA\")\n\n# Perform clustering on the SNN graph using the Walktrap algorithm.\n# The 'cluster_walktrap' function from igraph (used via bluster) is a common choice.\nclusters &lt;- igraph::cluster_walktrap(snn_graph)$membership\n\n# Add the cluster assignments to the colData of the SpatialExperiment object.\ncolData(spe)$clusters &lt;- factor(clusters)\n\n# Display the number of spots in each cluster\ntable(colData(spe)$clusters)\n\n\n   1    2    3    4    5    6    7    8    9   10   11 \n 235 1998 2062  991  512  733 1357 1366  458  221   67 \n\n### Evaluating Cluster Quality with Silhouette Scores\n# Silhouette scores provide a measure of how similar an object is to its own cluster\n# compared to other clusters. Values range from -1 (poor) to +1 (good).\n\n# Calculate silhouette scores. Requires the 'cluster' package.\nlibrary(cluster)\nsil &lt;- silhouette(clusters, dist(reducedDim(spe, \"PCA\")))\n\n# Summarize silhouette scores\nsummary(sil)\n\nSilhouette of 10000 units in 11 clusters from silhouette.default(x = clusters, dist = dist(reducedDim(spe, \"PCA\"))) :\n Cluster sizes and average silhouette widths:\n        235        1998        2062         991         512         733 \n-0.12632615  0.34663760 -0.12868280  0.15177343  0.26975473 -0.01154519 \n       1357        1366         458         221          67 \n 0.02833106  0.27146987  0.07149400  0.26075708  0.26281112 \nIndividual silhouette widths:\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.62501 -0.04244  0.11495  0.11949  0.29973  0.50526 \n\n# Plot silhouette scores (optional, can be very dense for many spots)\n# plot(sil, main = \"Silhouette Plot\")"
  },
  {
    "objectID": "day1/day1-3_feature_dimred_cluster.html#question-4",
    "href": "day1/day1-3_feature_dimred_cluster.html#question-4",
    "title": "Exercise 3",
    "section": "Question 4",
    "text": "Question 4\nHow might you determine an optimal number of clusters for your spatial transcriptomics data? What are the challenges in interpreting clusters in a spatial context?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nDetermining the optimal number of clusters is often an iterative process and can involve:\n\nVisual Inspection: Plotting clusters on UMAP and in spatial coordinates to see if they form coherent groups.\nBiological Knowledge: Aligning clusters with known tissue structures or cell types.\nStatistical Metrics: Using metrics like silhouette scores, Davies-Bouldin index, or gap statistics. The bluster package, for instance, provides functions like pairwiseRand or pairwiseJaccard to compare different clusterings, and silhouette from cluster package can be used to evaluate cluster cohesion and separation. While a full implementation is beyond this exercise, these metrics provide quantitative ways to assess cluster quality.\nResolution Parameter: For graph-based clustering, adjusting the resolution parameter can influence the number of clusters.\n\nChallenges in interpreting clusters in a spatial context:\n\nSpatial Heterogeneity: Clusters might not always correspond to perfectly contiguous spatial regions, especially if cell types are intermingled.\nTechnical Artifacts: Clusters might sometimes reflect technical variations (e.g., batch effects, poor quality regions) rather than true biological differences.\nResolution Mismatch: The resolution of clustering might not perfectly match the biological resolution of the tissue.\nDefining Boundaries: It can be challenging to define clear boundaries between spatially adjacent clusters."
  },
  {
    "objectID": "day1/day1-3_feature_dimred_cluster.html#marker-gene-identification",
    "href": "day1/day1-3_feature_dimred_cluster.html#marker-gene-identification",
    "title": "Exercise 3",
    "section": "Marker Gene Identification",
    "text": "Marker Gene Identification\nAfter identifying clusters, a crucial step is to characterize them by finding marker genes – genes that are highly expressed or uniquely expressed in one cluster compared to others. This helps in assigning biological identities to the discovered spatial domains.\n\n# Identify marker genes for each cluster using findMarkers from scran.\n# We compare each cluster against all other clusters.\nmarkers &lt;- findMarkers(spe, groups = colData(spe)$clusters, test.type = \"wilcox\", direction = \"up\")\n\n# Display top markers for the first few clusters.\n# For example, top 5 markers for Cluster 1.\n# Note: The output structure of findMarkers can be complex; this is a simplified view.\nif (\"1\" %in% names(markers)) {\n  head(markers[[\"1\"]], n = 5)\n}\n\nDataFrame with 5 rows and 14 columns\n             Top      p.value          FDR summary.AUC     AUC.2     AUC.3\n       &lt;integer&gt;    &lt;numeric&gt;    &lt;numeric&gt;   &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt;\nMT-CO2         1 2.45080e-110 1.22540e-106    0.949868  0.569729  0.905002\nMT-CO3         1 1.58426e-119 1.58426e-115    0.975429  0.500902  0.901311\nIGKC           1  4.65032e-16  7.75053e-13    0.693328  0.677618  0.500462\nTMSB4X         2  6.34331e-09  7.92914e-06    0.631404  0.600278  0.432046\nCCDC80         3  9.37865e-03  1.00000e+00    0.511814  0.503497  0.438020\n           AUC.4     AUC.5     AUC.6     AUC.7     AUC.8     AUC.9    AUC.10\n       &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt;\nMT-CO2 0.9505271  0.780544  0.903062  0.949868  0.949917  0.953768  0.128632\nMT-CO3 0.9733345  0.621351  0.843311  0.971506  0.975429  0.956787  0.105950\nIGKC   0.0138759  0.658108  0.615756  0.453315  0.478047  0.478593  0.693328\nTMSB4X 0.5463662  0.631815  0.631404  0.461340  0.328879  0.533564  0.596996\nCCDC80 0.3714387  0.511814  0.491338  0.270440  0.460905  0.410262  0.512766\n          AUC.11\n       &lt;numeric&gt;\nMT-CO2  0.966116\nMT-CO3  0.989362\nIGKC    0.748936\nTMSB4X  0.533757\nCCDC80  0.474690\n\n# To visualize marker genes, one common approach is a heatmap of top markers across clusters.\n# For simplicity, let's select the top 3 markers for each cluster and plot their expression.\n\n# Get top markers for each cluster\ntop_markers_list &lt;- lapply(names(markers), function(cl_id) {\n  current_markers &lt;- markers[[cl_id]]\n  \n  if (nrow(current_markers) &gt; 0) {\n    current_markers &lt;- current_markers[order(current_markers$FDR,\n                                             -current_markers$summary.AUC), ]\n    head(rownames(current_markers), 3)\n  } else {\n    NULL\n  }\n})\n\n# Flatten the list and remove NULLs\ntop_markers &lt;- unique(unlist(top_markers_list))\n\n# Ensure we have some markers to plot\nif (length(top_markers) &gt; 0) {\n  # Get expression for these top markers\n  marker_expr &lt;- logcounts(spe)[top_markers, ]\n\n  # Order spots by cluster for better visualization\n  spot_order &lt;- order(colData(spe)$clusters)\n  marker_expr_ordered &lt;- marker_expr[, spot_order]\n  cluster_labels_ordered &lt;- colData(spe)$clusters[spot_order]\n\n  # Create annotation for heatmap\n  annotation_col &lt;- data.frame(Cluster = cluster_labels_ordered)\n  rownames(annotation_col) &lt;- colnames(marker_expr_ordered)\n\n  # Plot heatmap\n  pheatmap(marker_expr_ordered,\n    cluster_rows = FALSE,\n    cluster_cols = FALSE,\n    show_colnames = FALSE,\n    annotation_col = annotation_col,\n    main = \"Top Marker Gene Expression per Cluster\"\n  )\n} else {\n  message(\"No marker genes found to plot.\")\n}"
  },
  {
    "objectID": "day1/day1-3_feature_dimred_cluster.html#question-5",
    "href": "day1/day1-3_feature_dimred_cluster.html#question-5",
    "title": "Exercise 3",
    "section": "Question 5",
    "text": "Question 5\nHow can identifying marker genes help in the biological interpretation of the discovered spatial clusters?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nIdentifying marker genes is crucial for biological interpretation because:\n\nAssigning Identity: Marker genes can be used to assign biological identities (e.g., cell types, tissue regions) to the computationally derived clusters by comparing them to known gene expression signatures.\nUnderstanding Function: The functions of marker genes can provide insights into the biological processes or pathways active within each cluster.\nValidation: Marker genes can be used to validate the clustering results against existing biological knowledge or independent experiments.\nFurther Research: They can serve as starting points for further investigation into the unique characteristics and roles of each spatial domain."
  },
  {
    "objectID": "day1/day1-3_feature_dimred_cluster.html#visualization-of-results",
    "href": "day1/day1-3_feature_dimred_cluster.html#visualization-of-results",
    "title": "Exercise 3",
    "section": "Visualization of Results",
    "text": "Visualization of Results\nVisualizing the dimensionality reduction and clustering results is crucial for interpreting the biological insights from your spatial transcriptomics data.\n\n# Visualize clusters on the UMAP embedding.\n# This helps to see how well distinct clusters are separated in the reduced dimension space.\nplotUMAP(spe, colour_by = \"clusters\") +\n  ggtitle(\"UMAP colored by Clusters\")\n\n\n\n\n\n\n\n# Visualize clusters in the spatial context.\n# This allows us to see the spatial distribution of the identified clusters.\n# We use escheR for enhanced spatial plotting.\nescheR::make_escheR(spe) |&gt;\n  escheR::add_fill(var = \"clusters\", point_size = 1.5) +\n  ggtitle(\"Spatial Clusters\")\n\n\n\n\n\n\n\n\n\nClustering Heatmap\nA heatmap of gene expression across the identified clusters can help to visualize the distinct transcriptional profiles that define each cluster. We will plot the expression of the top highly variable genes (HVGs) across the clusters.\n\n# Calculate average expression of HVGs per cluster.\n# First, get the expression matrix for HVGs.\nhvg_expr &lt;- logcounts(spe)[rowData(spe)$hvg, ]\n\n# Aggregate expression by cluster.\n# We need to ensure that the cluster labels are correctly aligned with the columns of hvg_expr.\ncluster_avg_expr &lt;- aggregate(t(hvg_expr), by = list(cluster = colData(spe)$clusters), FUN = mean)\n\n# Convert to a matrix and set row names to cluster IDs.\nrownames(cluster_avg_expr) &lt;- cluster_avg_expr$cluster\ncluster_avg_expr &lt;- as.matrix(cluster_avg_expr[, -1])\n\n# Transpose the matrix so genes are rows and clusters are columns for pheatmap.\ncluster_avg_expr &lt;- t(cluster_avg_expr)\n\n# Scale the rows (genes) for better visualization in the heatmap.\ncluster_avg_expr_scaled &lt;- t(scale(t(cluster_avg_expr)))\n\n# Plot the heatmap.\npheatmap(cluster_avg_expr_scaled,\n  cluster_rows = TRUE,\n  cluster_cols = TRUE,\n  show_rownames = FALSE, # Don't show all gene names if there are many\n  main = \"Average HVG Expression per Cluster\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nKey Takeaways:\n\nFeature selection (HVGs) reduces noise and improves computational efficiency.\nPCA provides a linear view of major variance, while UMAP and t-SNE offer a non-linear, often more visually distinct, representations.\nGraph-based clustering helps identify groups of spots with similar gene expression.\nIdentifying marker genes helps in the biological interpretation and annotation of clusters.\nVisualizing clusters in both reduced dimension space and spatial context is essential for biological interpretation."
  },
  {
    "objectID": "qmd/about.html",
    "href": "qmd/about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "qmd/precourse_preparations.html",
    "href": "qmd/precourse_preparations.html",
    "title": "Precourse preparations",
    "section": "",
    "text": "You should meet the learning outcomes of:\n\nIntroduction to bulk RNA-Seq: From Quality Control to Pathway Analysis\nIntroduction to Sequencing Data Analysis\nFirst Steps with R in Life Sciences\nSingle-Cell Transcriptomics with R\n\nIn summary, participants must already have a basic knowledge in: - Next Generation Sequencing (NGS) techniques - Analyzing gene expression data - Dimensionality reduction (PCA, UMAP) - Graph-based clustering - R (evaluate your R skills here) - UNIX (self-assess your skills with the e-learning course UNIX Fundamentals, and this quiz)\n\n\n\nAttendees should have a Wi-Fi enabled computer. An online R and RStudio environment will be provided. In order to access that environment your computer needs to be able to access http websites (not https). You can check this by browsing to http://www.httpforever.com. However, in case you wish to perform the practical exercises on your own computer, please take a moment to install the following before the course:\n\nR version &gt; 4.5.\nLatest RStudio version, the free version is perfectly fine.\nThe R packages necessary for the course. Find the renv to install them here."
  },
  {
    "objectID": "qmd/precourse_preparations.html#required-competences",
    "href": "qmd/precourse_preparations.html#required-competences",
    "title": "Precourse preparations",
    "section": "",
    "text": "You should meet the learning outcomes of:\n\nIntroduction to bulk RNA-Seq: From Quality Control to Pathway Analysis\nIntroduction to Sequencing Data Analysis\nFirst Steps with R in Life Sciences\nSingle-Cell Transcriptomics with R\n\nIn summary, participants must already have a basic knowledge in: - Next Generation Sequencing (NGS) techniques - Analyzing gene expression data - Dimensionality reduction (PCA, UMAP) - Graph-based clustering - R (evaluate your R skills here) - UNIX (self-assess your skills with the e-learning course UNIX Fundamentals, and this quiz)\n\n\n\nAttendees should have a Wi-Fi enabled computer. An online R and RStudio environment will be provided. In order to access that environment your computer needs to be able to access http websites (not https). You can check this by browsing to http://www.httpforever.com. However, in case you wish to perform the practical exercises on your own computer, please take a moment to install the following before the course:\n\nR version &gt; 4.5.\nLatest RStudio version, the free version is perfectly fine.\nThe R packages necessary for the course. Find the renv to install them here."
  }
]